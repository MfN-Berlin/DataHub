"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path
# import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATICFILES_DIRS = [BASE_DIR / "gdm/static",] # aditional static files that should be recognized by django to serve them

STATIC_URL = '/static/' # The URL of static files on the browser
MEDIA_URL = '/media/'

STATIC_ROOT = BASE_DIR.parent / "storage/static/" #  The location of static root for deployment/ngnix
MEDIA_ROOT = BASE_DIR.parent / "storage/media/" # The location of media root for deployment/ngnix


DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

LOGIN_URL="/admin/login/"
LOGIN_REDIRECT_URL="/dashboard"

# ENV FILE ADDED
# Initialise environment variables
# env = environ.Env()
# environ.Env.read_env(env_file="/home/mjv/Work/repository/GeneralProject/.env-dev")
# SECRET_KEY = env("SECRET_KEY")
# SECRET_KEY = 'sr1zz#)hfqvdk)uouzc9vv98m^$z2gcx=tsc8a0av#()6e2&7g'
SECRET_KEY = os.environ.get("SECRET_KEY")

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE'),
        'HOST': os.environ.get('DB_HOST'),
		'PORT': os.environ.get('DB_PORT'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS')
    }
}

DEFAULT_FILE_STORAGE = 'datahub.storage.FileSystemOverwriteStorage'

ODK_USER = os.environ.get("ODK_USER")
ODK_PASS = os.environ.get("ODK_PASS")



REST_FRAMEWORK = {
	'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    # Use Django's standard `django.contrib.auth` permissions,
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework_json_api.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework_json_api.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework_json_api.filters.QueryParameterValidationFilter',
        'rest_framework_json_api.filters.OrderingFilter',
        'rest_framework_json_api.django_filters.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
    ],
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework_json_api.pagination.JsonApiPageNumberPagination',
    # 'DEFAULT_SCHEMA_CLASS': 'rest_framework_json_api.schemas.openapi.AutoSchema',
    # 'DEFAULT_METADATA_CLASS': 'rest_framework_json_api.metadata.JSONAPIMetadata',
    'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler',
    'PAGE_SIZE': 50,
    # 'SEARCH_PARAM': 'filter[search]',
    # 'TEST_REQUEST_RENDERER_CLASSES': [
    #     'rest_framework_json_api.renderers.JSONRenderer',
    # ],
    # 'TEST_REQUEST_DEFAULT_FORMAT': 'vnd.api+json'
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ.get("SECRET_KEY")

# SECRET_KEY = ")uvika1p*v8+b8x_gibo8q+ff2%9u@3u)(j*rx^$6t01_h!$7_"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get('DEBUG_FLAG'))

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 
				 'datahub', 'datahub-devops',
				 'datahub.naturkundemuseum.berlin', 'datahub.mfn.berlin',
				 'datahub-devops.naturkundemuseum.berlin', 'datahub-devops.mfn.berlin'] # TODO: please put specific hostname, * is only for testing purposes 

CSRF_TRUSTED_ORIGINS = ['https://datahub.naturkundemuseum.berlin', 'https://datahub-devops.naturkundemuseum.berlin', 'https://127.0.0.1']

# AUTH_USER_MODEL = 'datahub.User'

# DEFAULT_SCHEMA_CLASS = 

AUTHENTICATION_BACKENDS = (
    # 'django_python3_ldap.auth.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)
# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'rest_framework',
    'rest_framework_json_api',
	# 'rest_framework.authtoken'
    'datahub',
    # 'django_python3_ldap'
    'django_tables2'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gdm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'gdm/templates'], # [os.path.join(BASE_DIR,'gdm/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'gdm.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases



# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_TZ = True

DATA_UPLOAD_MAX_MEMORY_SIZE = None
# HTTPS / Security
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
# SECURE_SSL_REDIRECT = True
# SECURE_HSTS_SECONDS = 3600
# SECURE_HSTS_PRELOAD = True
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# import ldap3

# USE_LDAP = True
# isLocal = False

# if USE_LDAP:
	# from ldap3 import SCOPE_SUBTREE

	#
	# These dicts are parsed by function LitDB.ldap.authentication_backend_classes()
	# and converted in LDAPBackend classes where the default settings are taken
	# directly from these dicts - with 2 exepction:
	#
	# 'NAME' values are just used to create the class name and after that ignored
	#
	# 'LDAP_USER_SEARCHES' values are used as direct args to create LDAPSearch
	# objects, which are then combined using a LDAPSearchUnion. And that is
	# used as 'USER_SEARCH' default setting auf the LDAPBackend subclass.
	#
	# AUTH_LDAP_SETS = (
	# 		{
	# 				'NAME' : 'MUSEUM',
	# 				'SERVER_URI' : 'ldap://192.168.201.11',
	# 				'PORT' : 389,
	# 				'BIND_DN' : 'cn=...,ou=Dienste,ou=Users,ou=museum,dc=naturkundemuseum-berlin,dc=de',
	# 				'BIND_PASSWORD' : '',
	# 				'LDAP_USER_SEARCHES' : (
	# 					('ou=Std Benutzer,ou=Users,ou=museum,dc=naturkundemuseum-berlin,dc=de', SCOPE_SUBTREE, '(cn=%(username)s)'),
	# 						('ou=Std Benutzer,ou=Users,ou=museum,dc=naturkundemuseum-berlin,dc=de', SCOPE_SUBTREE, '(mail=%(username)s)'),
	# 				),
	# 				'USER_ATTR_MAP' : {
	# 						"first_name" : "givenName",
	# 						"last_name"  : "sn",
	# 						"email"      : "mail",
	# 						"username"   : "sAMAccountName"
	# 				}
	# 		}
	# )

	# # The URL of the LDAP server.
	# LDAP_AUTH_URL = "ldap://192.168.201.11"

	# # Initiate TLS on connection.
	# LDAP_AUTH_USE_TLS = True

	# # The LDAP search base for looking up users.
	# LDAP_AUTH_SEARCH_BASE = "ou=Std Benutzer,ou=Users,ou=museum,dc=naturkundemuseum-berlin,dc=de"

	# # The LDAP class that represents a user.
	# LDAP_AUTH_OBJECT_CLASS = "user"

	# # User model fields mapped to the LDAP
	# # attributes that represent them.
	# LDAP_AUTH_USER_FIELDS = {
	# 	"username": "sAMAccountName",
	# 	"first_name": "givenName",
	# 	"last_name": "sn",
	# 	"email": "mail",
	# }

	# # A tuple of django model fields used to uniquely identify a user.
	# LDAP_AUTH_USER_LOOKUP_FIELDS = ("username",)

	# # Path to a callable that takes a dict of {model_field_name: value},
	# # returning a dict of clean model data.
	# # Use this to customize how data loaded from LDAP is saved to the User model.
	# LDAP_AUTH_CLEAN_USER_DATA = "django_python3_ldap.utils.clean_user_data"

	# # Path to a callable that takes a user model and a dict of {ldap_field_name: [value]},
	# # and saves any additional user relationships based on the LDAP data.
	# # Use this to customize how data loaded from LDAP is saved to User model relations.
	# # For customizing non-related User model fields, use LDAP_AUTH_CLEAN_USER_DATA.
	# LDAP_AUTH_SYNC_USER_RELATIONS = "django_python3_ldap.utils.sync_user_relations"

	# # Path to a callable that takes a dict of {ldap_field_name: value},
	# # returning a list of [ldap_search_filter]. The search filters will then be AND'd
	# # together when creating the final search filter.
	# LDAP_AUTH_FORMAT_SEARCH_FILTERS = "django_python3_ldap.utils.format_search_filters"

	# # Path to a callable that takes a dict of {model_field_name: value}, and returns
	# # a string of the username to bind to the LDAP server.
	# # Use this to support different types of LDAP server.

	# LDAP_AUTH_FORMAT_USERNAME = "django_python3_ldap.utils.format_username_active_directory"

	# # Sets the login domain for Active Directory users.
	# LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN = "MUSEUM"

	# # The LDAP username and password of a user for querying the LDAP database for user
	# # details. If None, then the authenticated user will be used for querying, and
	# # the `ldap_sync_users` command will perform an anonymous query.

	# # Set connection/receive timeouts (in seconds) on the underlying `ldap3` library.
	# LDAP_AUTH_CONNECT_TIMEOUT = None
	# LDAP_AUTH_RECEIVE_TIMEOUT = None

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
			'formatter': 'verbose'
        },
		'file': {
            'class': 'logging.FileHandler',
            'filename': str(MEDIA_ROOT / 'temp' / 'operation.log'),
            'formatter': 'simple'
        },
        # 'memory': {
        #     'level': 'DEBUG',
        #     'class': 'datahub.handlers.JobLogHandler',
        #     'job_logs': {},
        #     'formatter': 'verbose'
        # },
    },
    'loggers': {
		'main': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
		'operation': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
		'django_python3_ldap': {
            'handlers': ['console'],
            'level': 'DEBUG',
		},
        'apscheduler': {
            # 'handlers': ['django_model'],
			'level': 'INFO',
            'propagate': False,
        },		
    },
	'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
	}
}
